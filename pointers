//All values are stored in memory
//Every location in memory has an address
//A pointer is a memory address

package main

import (
	"fmt"
)

func main() {
	a := 42

	//value
	fmt.Println(a)
	//address
	fmt.Println(&a)
	//type of value
	fmt.Printf("%T\n", a)
	//type of address
	fmt.Printf("%T\n", &a)

	var b *int = &a
	fmt.Println(b)

}

package main

import (
	"fmt"
)

func main() {
	a := 42

	//value
	fmt.Println(a)

	//pointer to address
	fmt.Println(&a)

	//type of value
	fmt.Printf("%T\n", a)

	//type of address
	fmt.Printf("%T\n", &a)

	b := &a
	fmt.Println(b)
	//dereference the value
	fmt.Println(*b) //* gives you the value stored at an address when you have the address
	fmt.Println(*&a)
	
	*b = 45 //* change the value stored in a
	fmt.Println(a)

}

//Use pointers when 1) you don't want to pass around a lot of data 2) you want to change the data at a location

//no pointer

package main

import (
	"fmt"
)

func main() {
	x := 0
	foo(x)
	fmt.Println(x)
}

func foo(y int) {
	fmt.Println(y)
	y = 43
	fmt.Println(y)
}

//pointer

package main

import (
	"fmt"
)

func main() {
	x := 0
	fmt.Println("x before", &x)
	fmt.Println("x before", x)
	foo(&x)
	fmt.Println("x after", &x)
	fmt.Println("x after", x)
}

//pass by value
func foo(y *int) {
	fmt.Println("y before", y)
	fmt.Println("y before", *y)
	*y = 45
	//dereference the value
	fmt.Println("y after", y)
	fmt.Println("y after", *y)
}


