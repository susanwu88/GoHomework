//a WaitGroup waits for a collection of goroutines to finish
//main goroutine calls Add to set the number of goroutines to wait for. 
//then each of the goroutines runs and calls Done when finished
//writing concurrent code is easy, put "go" in front of the function or method call


package main

import (
	"fmt"
	"runtime"
)

func main() {
	fmt.Println("OS\t", runtime.GOOS)
	fmt.Println("ARCH\t", runtime.GOARCH)
	fmt.Println("CPU\t", runtime.NumCPU())
	fmt.Println("Goroutines\t", runtime.NumGoroutine())
	foo()
	bar()
}

func foo() {
	for i := 0; i < 10; i++ {
		fmt.Println("foo:", i)
	}

}
func bar() {

	for i := 0; i < 10; i++ {
		fmt.Println("bar:", i)
	}
}


//add go in front of the function
//go routine now 2

package main

import (
	"fmt"
	"runtime"
)

func main() {
	fmt.Println("OS\t", runtime.GOOS)
	fmt.Println("ARCH\t", runtime.GOARCH)
	fmt.Println("CPU\t", runtime.NumCPU())
	fmt.Println("Goroutines\t", runtime.NumGoroutine())
	go foo()
	bar()

	fmt.Println("CPU\t", runtime.NumCPU())
	fmt.Println("Goroutines\t", runtime.NumGoroutine())
}

func foo() {
	for i := 0; i < 10; i++ {
		fmt.Println("foo:", i)
	}

}
func bar() {

	for i := 0; i < 10; i++ {
		fmt.Println("bar:", i)
	}
}
